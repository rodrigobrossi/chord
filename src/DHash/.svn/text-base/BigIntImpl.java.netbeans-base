package DHash;

/**
 *
 * @author gasparosoft
 */
public class BigIntImpl implements BigInt, Comparable {

    private final byte[] number;

    public BigIntImpl(byte[] number) {
        this.number = number;
    }

    public BigInt addition(byte[] secNumber) {
        int carry = 0;
        int locLen = this.number.length;
        int remLen = secNumber.length;
        byte[] temp;
        byte[] result = null;
        int i;
        int sum;

        if (locLen > remLen) {
            temp = new byte[locLen];
            System.arraycopy(secNumber, 0, temp, locLen - remLen, remLen);

            for (i = 0; i < locLen - remLen; i++) {
                temp[i] = 0;
            }

            result = new byte[locLen];

            for (i = 0; i < locLen; i++) {
                sum = temp[i] + this.number[i] + carry;
                carry = sum >> 8;
                result[i] = (byte) (sum & 0xFF);
            }

        } else if (locLen < remLen) {
            temp = new byte[remLen];
            System.arraycopy(this.number, 0, temp, remLen - locLen, locLen);

            for (i = 0; i < remLen - locLen; i++) {
                temp[i] = 0;
            }

            result = new byte[remLen];

            for (i = 0; i < remLen; i++) {
                sum = temp[i] + secNumber[i] + carry;
                carry = sum >> 8;
                result[i] = (byte) (sum & 0xFF);
            }
        } else {
            result = new byte[remLen];

            for (i = 0; i < remLen; i++) {
                sum = this.number[i] + secNumber[i] + carry;
                carry = sum >> 8;
                result[i] = (byte) (sum & 0xFF);
            }

        }

        return new BigIntImpl(result);
    }

    public BigInt powerOfTwo(int k) {
        //double d = Math.pow(2, k);
        String s = "10";
/*
        while ( k > 1)
            s += "0";
        System.out.println(s);
*/
        
        /*
         * new byte[] {
                (byte)(value >>> 24),
                (byte)(value >>> 16),
                (byte)(value >>> 8),
                (byte)value
           };
         */
        return null;
    }

    @Override
    public String toString() {
        String string = "";

        for (byte b : number) {
            string += Byte.toString(b);
        }

        return string;
    }

    public String toHexString() {
        String hexString = "";

        for (byte b : number) {
            hexString += Integer.toHexString(b & 0xff).toUpperCase();
        }
        // System.out.printf("%02X " , b & 0xff);

        return hexString;
    }

    // Gaspar's Patent
    public String toBinaryString() {
        //System.out.println("DEBUG : " + Integer.toBinaryString(toDecimal()));
        String string = "";
        int value = toDecimal();
        int temp;
        int halfValue;
        int pos, rem, len;

        if (value == 1) {
            string += "1";
            return string;
        }
        while ((halfValue = value >>> 1) != 0) {
            temp = value;

            string = (temp & 0x1) + string;

            if (halfValue == 1) {
                string = "1" + string;
                break;
            }

            value = halfValue;
        }
        pos = string.indexOf("1");
        rem = string.length() % 8 - 1;
        len = string.length();

        if (len > 8) {
            if (pos > rem) {
                string = string.substring(pos);
            }
        }
        for (int i = 0; i < string.length() % 8; i++) {
            string = "0" + string;
        }

        return string;
    }

    public int toDecimal() {
        return Integer.parseInt(toHexString(), 16);
    }

    public int compareTo(Object o) {
        BigInt bigInt;
        byte[] bArray;
        int i;
        int lenLoc = this.number.length;
        int lenObj;
        String strObj;
        String strLoc;

        if (o instanceof BigInt) {
            bigInt = (BigInt) o;
            bArray = bigInt.getBytes();
            lenObj = bArray.length;

            /* Appropriate for arrays with same length */
            if (lenLoc == lenObj) {
                for (i = 0; i < lenLoc; i++) {
                    if (this.number[i] > bArray[i]) {
                        return 1;
                    } else if (this.number[i] < bArray[i]) {
                        return -1;
                    } else {
                        continue;
                    }
                }
            } else { /* for general use*/
                strObj = bigInt.toBinaryString();
                lenObj = strObj.length();
                strLoc = toBinaryString();
                lenLoc = strLoc.length();

                if (lenLoc < lenObj) {
                    for (i = lenLoc; i < lenObj; i++) {
                        if (strObj.charAt(i) == '1') {
                            return -1;
                        }
                    }
                } else if (lenLoc > lenObj) {
                    for (i = lenObj; i < lenLoc; i++) {
                        if (strLoc.charAt(i) == '1') {
                            return 1;
                        }
                    }
                } else {
                    return strLoc.compareTo(strObj);
                }
            }
        } else {
            throw new IllegalArgumentException("Requires a BigInt Object");
        }
        return 0;
    }

    public byte[] getBytes() {
        byte[] nBigNum = new byte[this.number.length];

        System.arraycopy(this.number, 0, nBigNum, 0, this.number.length);

        return nBigNum;
    }
}
